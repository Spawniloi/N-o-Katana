import pygame
import sys
import math

# Initialisation de Pygame
pygame.init()

# Définir les couleurs
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Définir les constantes
SCREEN_WIDTH, SCREEN_HEIGHT = 600, 400
SPRITE_ROWS = 4
SPRITE_COLUMNS = 4
PLAYER_SIZE = 64
PLAYER_SPEED = 10
MONSTER_SIZE = 64  # Remplacez 64 par la taille réelle des sprites de votre monstre

# Créer la fenêtre
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Jeu avec des Sprites")

# Charger la spritesheet du joueur (256x256 pixels)
player_spritesheet = pygame.image.load("player_spritesheet.png")

# Fonction pour découper une spritesheet en une liste d'images
def get_sprites_from_spritesheet(spritesheet, sprite_size, row):
    sprites = []
    sheet_width, sheet_height = spritesheet.get_size()
    
    for col in range(SPRITE_COLUMNS):
        x = col * sprite_size
        y = row * sprite_size
        sprite = spritesheet.subsurface(pygame.Rect(x, y, sprite_size, sprite_size))
        sprites.append(sprite)
    return sprites

# Obtenir la liste de sprites du joueur pour chaque direction
player_sprites_up = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 3)
player_sprites_down = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 0)
player_sprites_left = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 1)
player_sprites_right = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 2)

# Obtenir la liste de sprites d'attaque du joueur pour chaque direction
player_sprites_attack_up = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 0)
player_sprites_attack_down = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 3)
player_sprites_attack_left = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 2)
player_sprites_attack_right = get_sprites_from_spritesheet(player_spritesheet, PLAYER_SIZE, 1)

# Créer une classe pour la carte
class GameMap(pygame.sprite.Sprite):
    def __init__(self, map_image):
        super().__init__()
        self.image = pygame.image.load(map_image)
        self.rect = self.image.get_rect()
        self.width, self.height = self.rect.width, self.rect.height

class Player(pygame.sprite.Sprite):
    def __init__(self, x, y, map_width, map_height):
        super().__init__()
        self.direction = 'down'  # Direction initiale
        self.image_index = 0
        self.images = {
            'up': player_sprites_up,
            'down': player_sprites_down,
            'left': player_sprites_left,
            'right': player_sprites_right,
            'attack_up': player_sprites_attack_up,
            'attack_down': player_sprites_attack_down,
            'attack_left': player_sprites_attack_left,
            'attack_right': player_sprites_attack_right
        }
        self.image = self.images[self.direction][self.image_index]
        self.rect = self.image.get_rect(topleft=(x, y))
        self.map_width = map_width
        self.map_height = map_height
        self.map_rect = pygame.Rect(0, 0, map_width, map_height)  # Créer un rectangle pour représenter la carte
        self.attack_range = 100
        self.attacking = False
        self.attack_anim_frames = 10
        self.current_frame = 0
        self.health = 3  # Définir la santé initiale du joueur

    def update(self):
        # Gestion du déplacement du joueur
        keys = pygame.key.get_pressed()
        dx, dy = 0, 0
        if keys[pygame.K_LEFT] or keys[pygame.K_q]:
            dx -= PLAYER_SPEED
            self.direction = 'left'
        elif keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            dx += PLAYER_SPEED
            self.direction = 'right'
        elif keys[pygame.K_UP] or keys[pygame.K_z]:
            dy -= PLAYER_SPEED
            self.direction = 'up'
        elif keys[pygame.K_DOWN] or keys[pygame.K_s]:
            dy += PLAYER_SPEED
            self.direction = 'down'

        # Vérifier les limites de la carte
        new_rect = self.rect.move(dx, dy)
        if self.map_rect.contains(new_rect):
            self.rect = new_rect

        # Gérer l'animation d'attaque
        if self.attacking:
            self.current_frame += 1
            if self.current_frame >= self.attack_anim_frames:
                self.attacking = False
                self.current_frame = 0
                self.image = self.images[self.direction][self.image_index]  # Revenir à l'image de marche

        # Animation : changer d'image pour créer une animation de marche ou d'attaque
        if not self.attacking:
            self.image_index = (self.image_index + 1) % len(self.images[self.direction])
            self.image = self.images[self.direction][self.image_index]

    def attack(self):
        self.attacking = True
        self.image = self.images['attack_' + self.direction][0]  # Commencer l'animation d'attaque

    def handle_collision(self, enemies):
        # Initialiser dx et dy
        dx, dy = 0, 0
        
        # Gérer les collisions avec les ennemis
        for enemy in enemies:
            if self.rect.colliderect(enemy.rect):
                # Calculer le vecteur de déplacement inverse du joueur pour annuler la collision
                dx = self.rect.centerx - enemy.rect.centerx
                dy = self.rect.centery - enemy.rect.centery
                # Normaliser le vecteur
                length = max(1, math.hypot(dx, dy))
                dx /= length
                dy /= length

                # Déplacer le joueur dans la direction opposée pour annuler la collision
                self.rect.x += dx * PLAYER_SPEED
                self.rect.y += dy * PLAYER_SPEED

                # Autoriser le joueur à attaquer après la collision
                if self.attacking:
                    enemy.hit()  # Supprimer l'ennemi après avoir été attaqué avec succès

        # Vérifier si le joueur sort des limites de la carte
        if self.rect.left < 0:
            self.rect.left = 0
        elif self.rect.right > self.map_width:
            self.rect.right = self.map_width
        if self.rect.top < 0:
            self.rect.top = 0
        elif self.rect.bottom > self.map_height:
            self.rect.bottom = self.map_height

    def take_damage(self, damage):
        self.health -= damage  # Réduire la santé du joueur en fonction des dégâts infligés

# Charger la spritesheet du monstre (256x256 pixels)
monster_spritesheet = pygame.image.load("monster_spritesheet.png")

# Obtenir la liste de sprites du monstre pour chaque direction
monster_sprites_up = get_sprites_from_spritesheet(monster_spritesheet, MONSTER_SIZE, 3)
monster_sprites_down = get_sprites_from_spritesheet(monster_spritesheet, MONSTER_SIZE, 0)
monster_sprites_left = get_sprites_from_spritesheet(monster_spritesheet, MONSTER_SIZE, 1)
monster_sprites_right = get_sprites_from_spritesheet(monster_spritesheet, MONSTER_SIZE, 2)

class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y, speed):
        super().__init__()
        self.direction = 'down'  # Direction initiale
        self.image_index = 0
        self.images = {
            'up': monster_sprites_up,
            'down': monster_sprites_down,
            'left': monster_sprites_left,
            'right': monster_sprites_right
        }
        self.image = self.images[self.direction][self.image_index]
        self.rect = self.image.get_rect(topleft=(x, y))
        self.speed = speed
        self.target = None  # Variable pour stocker la cible (le joueur)
        self.damage = 1  # Définir les dégâts infligés par l'ennemi

    def update(self):
        dx, dy = 0, 0  # Initialiser dx et dy à l'extérieur du bloc if
        if self.target:
            # Calculer le vecteur de direction de l'ennemi vers le joueur
            dx = self.target.rect.centerx - self.rect.centerx
            dy = self.target.rect.centery - self.rect.centery
            distance = math.hypot(dx, dy)

            # Déplacer l'ennemi vers le joueur avec une vitesse constante
            if distance > 0:
                speed_factor = min(distance, self.speed) / distance
                self.rect.x += dx * speed_factor
                self.rect.y += dy * speed_factor

        # Changer l'image de l'ennemi en fonction de sa direction
        if dx > 0:
            self.direction = 'right'
        elif dx < 0:
            self.direction = 'left'
        if dy > 0:
            self.direction = 'down'
        elif dy < 0:
            self.direction = 'up'
        self.image = self.images[self.direction][self.image_index]

    def set_target(self, target):
        self.target = target

    def hit(self):
        # Supprimer l'ennemi du groupe
        self.kill()
        player.take_damage(self.damage)  # Infliger des dégâts au joueur
        
# Création des ennemis
enemies = pygame.sprite.Group()
enemies.add(Enemy(200, 200, 2))  # Par exemple, la vitesse est définie à 2

        
# Créer un groupe de sprites
all_sprites = pygame.sprite.Group()
all_sprites.add(enemies)
enemy_speed = 3  # Vitesse de déplacement de l'ennemi

# Initialiser un ennemi en bas à gauche de l'écran avec une certaine vitesse
enemy = Enemy(0, SCREEN_HEIGHT, enemy_speed)
enemies.add(enemy)
# Créer la carte et le joueur, et les ajouter au groupe
game_map = GameMap("map.jpg")
player = Player(SCREEN_WIDTH // 2 - PLAYER_SIZE // 2, SCREEN_HEIGHT // 2 - PLAYER_SIZE // 2, game_map.width, game_map.height)
all_sprites.add(game_map, player)

# Créer une classe pour la caméra
class Camera:
    def __init__(self, width, height):
        self.camera = pygame.Rect(0, 0, width, height)
        self.width = width
        self.height = height

    def apply(self, entity):
        return entity.rect.move(self.camera.topleft)

    def update(self, target):
        x = -target.rect.x + SCREEN_WIDTH // 2
        y = -target.rect.y + SCREEN_HEIGHT // 2

        # Empêcher la caméra de sortir des limites de la carte
        x = min(0, x)  # Ne pas aller à gauche de la carte
        y = min(0, y)  # Ne pas aller au-dessus de la carte
        x = max(-(self.width - SCREEN_WIDTH), x)  # Ne pas aller à droite de la carte
        y = max(-(self.height - SCREEN_HEIGHT), y)  # Ne pas aller en dessous de la carte

        self.camera = pygame.Rect(x, y, self.width, self.height)

# Créer une instance de la caméra
camera = Camera(game_map.rect.width, game_map.rect.height)

# Variable pour stocker le temps écoulé depuis la dernière apparition d'un ennemi
enemy_spawn_timer = 0
spawn_interval = 5 * 1000  # 5 secondes en millisecondes

# Boucle principale du jeu
while True:
    current_time = pygame.time.get_ticks()  # Obtenir le temps actuel en millisecondes

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Gérer les événements de déplacement et d'attaque du joueur
    keys = pygame.key.get_pressed()
    if any(keys):
        player.update()
        camera.update(player)
        if keys[pygame.K_SPACE]:
            player.attack()  # Appel de la méthode d'attaque du joueur


    # Vérifier la collision entre le joueur et l'ennemi
    for enemy in enemies:
        if player.rect.colliderect(enemy.rect):
            # Calculer le vecteur de déplacement inverse du joueur pour annuler la collision
            dx = player.rect.centerx - enemy.rect.centerx
            dy = player.rect.centery - enemy.rect.centery
            # Normaliser le vecteur
            length = max(1, math.hypot(dx, dy))
            dx /= length
            dy /= length

            # Déplacer le joueur dans la direction opposée pour annuler la collision
            player.rect.x += dx * PLAYER_SPEED
            player.rect.y += dy * PLAYER_SPEED

            # Autoriser le joueur à attaquer après la collision
            if player.attacking:
                enemy.hit()  # Supprimer l'ennemi après avoir été attaqué avec succès

    # Vérifier si le joueur atteint la sortie de la carte
    if not game_map.rect.contains(player.rect):
        # Si le joueur sort de la carte, le ramener à l'intérieur
        player.rect.clamp_ip(game_map.rect)

    # Mettre à jour la position de l'ennemi pour qu'il suive le joueur
    for enemy in enemies:
        enemy.set_target(player)  # Définir le joueur comme cible de l'ennemi
        enemy.update()

    # Vérifier si le temps écoulé dépasse le délai d'apparition des ennemis
    if current_time - enemy_spawn_timer > spawn_interval:
        # Créer un nouvel ennemi
        new_enemy = Enemy(0, SCREEN_HEIGHT, enemy_speed)
        enemies.add(new_enemy)
        enemy_spawn_timer = current_time  # Réinitialiser le minuteur

    # Dessiner l'écran
    screen.fill(WHITE)
    for sprite in all_sprites:
        screen.blit(sprite.image, camera.apply(sprite))  # Dessiner les autres sprites
    for enemy in enemies:
        # Dessiner l'ennemi uniquement s'il est à l'intérieur des limites de l'écran
        if camera.apply(enemy).colliderect(screen.get_rect()):
            screen.blit(enemy.image, camera.apply(enemy))  # Dessiner les ennemis

    # Mettre à jour l'affichage
    pygame.display.flip()

    # Contrôler la vitesse de rafraîchissement
    pygame.time.Clock().tick(60)  # Ajuster la vitesse d'animation en changeant le nombre de ticks
